#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (C) 2022 Estudios 6/8 (bakumapu@gmail.com)
# 
# This program is part of Bakumapu and is released under
# the GPLv2 License: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html

import sys
import subprocess


BAKU_URL = "https://github.com/polirritmico/bakupipe.git"
BAKUPIPE_URL = "https://github.com/polirritmico/bakumapu.git"


def run_command(str _command):
    _proc = subprocess.Popen(_command.split(),
                             stdout=subprocess.PIPE,
                             universal_newlines=True)
    _output = str(_proc.communicate()[0])

    return _output


def check_baku_repo():
    output = run_command("git config --get remote.origin.url")

    if output == BAKU_URL or output == BAKUPIPE_URL:
        return False
    return True


def mk_pre_deploy_branch():
    _command = "git branch -b pre-deploy"
    _proc = subprocess.Popen(_command.split(), stdout=subprocess.PIPE)

    return _proc.communicate()


def merge_pre_deploy():
    _command = "git rev-parse --abbrev-ref HEAD"
    _proc = subprocess.Popen(_command.split(),
                             stdout=subprocess.PIPE,
                             universal_newlines=True)
    output = str(_proc.communicate()[0])


def init_test_stage():
    pass


def send_log():
    pass


def merge_deploy():
    pass


def remove_deploy():
    pass


def update_version_name():
    pass


def build_deploy():
    pass


def update_artifacts():
    pass


def print_log():
    pass


def main(argv):
    if argv[0] != "deploy":
        print("ERROR")
        return 1

    print("Init deploy pipeline...")

    if not check_baku_repo():
        return 1

    print("Creando rama pre-deploy")

    #mk_pre_deploy_branch()

    #print("Merge a pre-deploy")

    #merge_pre_deploy()

    #print("Test stage")

    #if not init_test_stage():
    #    print("Si falla enviar log")
    #    send_log()

    #print("Merge a rama deploy")

    #merge_deploy()

    #print("Borrar pre-deploy")

    #remove_deploy()

    #print("Ajustar nombre de version")

    #update_version_name()

    #print("Build")

    #build_deploy()

    #print("Subir binarios a artifact-repo")

    #upload_artifacts()

    #print("Generar log / Enviar informes")

    #print_log()


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
